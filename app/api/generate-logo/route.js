// app/api/generate-text/route.js
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request) {
  try {
    // Log the first 5 characters of the Gemini API key (for debugging purposes)
    console.log("Gemini API Key (first 5 chars):", process.env.GEMINI_API_KEY?.substring(0, 5));

    let body;
    try {
      // Parse the JSON request body
      body = await request.json();
    } catch (parseError) {
      console.error('Error parsing request body:', parseError);
      return NextResponse.json({
        error: 'Invalid request body',
        details: parseError.message,
      }, { status: 400 });
    }

    const { prompt } = body;

    if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
      return NextResponse.json({
        error: 'Prompt is required and should be a non-empty string',
      }, { status: 400 });
    }

    console.log("Received prompt:", prompt);

    try {
      // Make a request to the Gemini API for text generation (or any other task)
      const response = await axios.post(
        'ddfa60ca-f030-4c15-9800-d8f482142bb0', // Replace with actual Gemini API endpoint
        {
          prompt: prompt, // The prompt for the AI model
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.GEMINI_API_KEY}`, // API key for authentication
          },
          timeout: 60000, // Set a timeout for the request
        }
      );

      // If the response contains the generated text
      if (response.data) {
        const generatedText = response.data.generated_text; // Adjust based on the API response format

        console.log("Successfully generated text:", generatedText);

        return NextResponse.json({
          generatedText: generatedText,
          prompt: prompt,
        });
      } else {
        throw new Error('No text generated by Gemini AI API');
      }

    } catch (geminiError) {
      console.error("Gemini API Error:", geminiError.response ? geminiError.response.data : geminiError.message);

      const status = geminiError.response?.status || 500;
      return NextResponse.json({
        error: geminiError.message || 'Error communicating with Gemini AI API',
        details: geminiError.response?.data || {},
      }, { status });
    }

  } catch (globalError) {
    console.error("Global Error in API:", globalError);

    return NextResponse.json({
      error: 'An unexpected error occurred',
      details: {
        message: globalError.message,
      },
    }, { status: 500 });
  }
}
